name: Build APK

### To build from subfolder,just modify the 'ANDROID_DIR'

on:
  push:
    # branches: [ "main","master","dev","release" ]
    ### Start build only on these branches
  workflow_dispatch:
  ### Support manual build in 'Actions/workflow'

env:
  ANDROID_DIR: .
  ### Build from project root (when 'app' folder is just at project root)
  # ANDROID_DIR: android
  ### Build from 'android' folder (when 'app' folder is in 'project/android' folder), modify it as you need.

permissions:
  contents: write

jobs:
  build_apk:
    strategy:
      matrix:
        # build_type: ['debug', 'release']
        build_type: ['release']
    name: Build APK
    runs-on: ubuntu-latest
    steps:

      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4


      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle') }}

      - name: Increase Gradle memory
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          printf "\norg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g\n" >> gradle.properties

      - name: Make gradlew executable
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          if [ ! -f "gradlew" ]; then gradle wrapper; fi
          chmod +x gradlew

      - name: Build ${{ matrix.build_type }} APK
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          build_type=${{ matrix.build_type }}
          ./gradlew assemble${build_type^}

      - name: Show apk paths
        run: |
            echo ">>${{ env.ANDROID_DIR }}/:"
            ls -la ${{ env.ANDROID_DIR }}/
            echo ">>${{ env.ANDROID_DIR }}/app/:"
            ls -la ${{ env.ANDROID_DIR }}/app/
            echo ">>${{ env.ANDROID_DIR }}/app/build/:"
            ls -la ${{ env.ANDROID_DIR }}/app/build/
            echo ">>${{ env.ANDROID_DIR }}/app/build/outputs/:"
            ls -la ${{ env.ANDROID_DIR }}/app/build/outputs/
            echo ">>apk files in outputs folder:"
            cd ${{ env.ANDROID_DIR }}/app/build/outputs/ && find -name *.apk

      - name: Copy ${{ matrix.build_type }} APK
        run: |
          cp ${{ env.ANDROID_DIR }}/app/build/outputs/apk/free/${{ matrix.build_type }}/*.apk ./apk-free-${{ matrix.build_type }}-unsigned.apk
          cp ${{ env.ANDROID_DIR }}/app/build/outputs/apk/charge/${{ matrix.build_type }}/*.apk ./apk-charge-${{ matrix.build_type }}-unsigned.apk

      - name: Generate build timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H')" >> $GITHUB_ENV

      - name: Upload free-${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-free-${{ matrix.build_type }}-${{ env.TIMESTAMP }}
          path: apk-free-${{ matrix.build_type }}-unsigned.apk

      - name: Upload charge-${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-charge-${{ matrix.build_type }}-${{ env.TIMESTAMP }}
          path: apk-charge-${{ matrix.build_type }}-unsigned.apk
